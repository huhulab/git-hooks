#!/usr/bin/env python
"""
Forked from https://gist.github.com/810399
"""
from __future__ import with_statement, print_function
import os
import re
import shutil
import subprocess
import sys
import tempfile


# =============================================================================
#  PEP8 config
# =============================================================================
# don't fill in both of these
select_codes = []
# ignore_codes = ["E121", "E122", "E123", "E124", "E125", "E126", "E127",
#                 "E128", "E129", "E131", "E501"]
ignore_codes = []
# Add things like "--max-line-length=120" below
overrides = ["--max-line-length=100"]


def system(*args, **kwargs):
    kwargs.setdefault('stdout', subprocess.PIPE)
    proc = subprocess.Popen(args, **kwargs)
    out, err = proc.communicate()
    return out


def check_pep8(tempdir):
    args = ['pep8']
    if select_codes and ignore_codes:
        print(u'Error: select and ignore codes are mutually exclusive')
        sys.exit(1)
    elif select_codes:
        args.extend(('--select', ','.join(select_codes)))
    elif ignore_codes:
        args.extend(('--ignore', ','.join(ignore_codes)))
    args.extend(overrides)
    args.append('.')
    output = system(*args, cwd=tempdir)
    if output:
        print(u'PEP8 style violations have been detected.  Please fix them\n'
              'or force the commit with "git commit --no-verify".\n')
        print(output.decode("utf-8"),)
        sys.exit(1)


def check_pyflakes(tempdir):
    args = ['pyflakes', '.']
    output = system(*args, cwd=tempdir)
    regexp = re.compile(
        '.*__init__.py:[0-9]+: \'from [0-9a-zA-Z_]+ import \*\' used;'
        ' unable to detect undefined names')
    lines = [line for line in output.split(u'\n') if line]
    error_lines = []
    for line in lines:
        if not regexp.match(line):
            error_lines.append(line)
        else:
            print(u'[Don\'t use in future code!!!]: {}'.format(line))
    if error_lines:
        print(u'Pyflakes checker not pass.  Please fix them\n'
              'or force the commit with "git commit --no-verify".\n')
        print(u'\n'.join(error_lines).decode("utf-8"),)
        sys.exit(1)


def main():
    modified = re.compile('^[AM]+\s+(?P<name>.*\.py$)', re.MULTILINE)
    files = system('git', 'status', '--porcelain').decode("utf-8")
    files = modified.findall(files)

    tempdir = tempfile.mkdtemp()
    for name in files:
        filename = os.path.join(tempdir, name)
        filepath = os.path.dirname(filename)

        if not os.path.exists(filepath):
            os.makedirs(filepath)
        with open(filename, 'w') as f:
            system('git', 'show', ':' + name, stdout=f)
    check_pyflakes(tempdir)
    check_pep8(tempdir)
    shutil.rmtree(tempdir)


if __name__ == '__main__':
    main()
